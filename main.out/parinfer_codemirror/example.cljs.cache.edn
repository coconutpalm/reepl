;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name parinfer-codemirror.example, :imports nil, :requires {clojure.string clojure.string, parinfer-codemirror.editor parinfer-codemirror.editor, parinfer-codemirror.state parinfer-codemirror.state, parinfer-codemirror.editor-support parinfer-codemirror.editor-support}, :uses {get-prev-state parinfer-codemirror.editor-support, set-frame-updated! parinfer-codemirror.editor-support, join clojure.string, frame-updated? parinfer-codemirror.editor-support, fix-text! parinfer-codemirror.editor-support, update-cursor! parinfer-codemirror.editor-support, state parinfer-codemirror.state, empty-editor-state parinfer-codemirror.state, IEditor parinfer-codemirror.editor-support, parinferize! parinfer-codemirror.editor, cm-key parinfer-codemirror.editor-support}, :defs {on-tab {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/parinfer_codemirror/example.cljs", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([cm])), :doc "Indent selection or insert two spaces when tab is pressed.\n  from: https://github.com/codemirror/CodeMirror/issues/988#issuecomment-14921785"}, :name parinfer-codemirror.example/on-tab, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/parinfer_codemirror/example.cljs", :end-column 13, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm])), :doc "Indent selection or insert two spaces when tab is pressed.\n  from: https://github.com/codemirror/CodeMirror/issues/988#issuecomment-14921785"}, editor-opts {:name parinfer-codemirror.example/editor-opts, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/parinfer_codemirror/example.cljs", :line 25, :column 1, :end-line 25, :end-column 17, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/parinfer_codemirror/example.cljs", :line 25, :column 6, :end-line 25, :end-column 17}}, create-regular-editor! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/parinfer_codemirror/example.cljs", :line 31, :column 7, :end-line 31, :end-column 29, :arglists (quote ([element-id] [element-id opts])), :doc "Create a non-parinfer editor.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([element-id] [element-id opts]), :arglists ([element-id] [element-id opts]), :arglists-meta (nil nil)}}, :name parinfer-codemirror.example/create-regular-editor!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/parinfer_codemirror/example.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([element-id] [element-id opts]), :arglists ([element-id] [element-id opts]), :arglists-meta (nil nil)}, :method-params ([element-id] [element-id opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists ([element-id] [element-id opts]), :doc "Create a non-parinfer editor."}, create-editor! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/parinfer_codemirror/example.cljs", :line 42, :column 7, :end-line 42, :end-column 21, :arglists (quote ([element-id key-] [element-id key- opts])), :doc "Create a parinfer editor.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([element-id key-] [element-id key- opts]), :arglists ([element-id key-] [element-id key- opts]), :arglists-meta (nil nil)}}, :name parinfer-codemirror.example/create-editor!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/parinfer_codemirror/example.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([element-id key-] [element-id key- opts]), :arglists ([element-id key-] [element-id key- opts]), :arglists-meta (nil nil)}, :method-params ([element-id key-] [element-id key- opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 3, :fn-var true, :arglists ([element-id key-] [element-id key- opts]), :doc "Create a parinfer editor."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:matchBrackets :Tab :mode :parinfer-mode :extraKeys :Shift-Tab}, :order [:mode :matchBrackets :extraKeys :Tab :Shift-Tab :parinfer-mode]}, :doc nil}