;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name reepl.code-mirror, :imports nil, :requires {pprint cljs.pprint, cljsjs.codemirror.addon.runmode.colorize cljsjs.codemirror.addon.runmode.colorize, reagent.core reagent.core, r reagent.core, cljsjs.codemirror cljsjs.codemirror, cljs.pprint cljs.pprint, cljsjs.codemirror.mode.clojure cljsjs.codemirror.mode.clojure, cljsjs.codemirror.mode.javascript cljsjs.codemirror.mode.javascript, cljsjs.codemirror.addon.hint.show-hint cljsjs.codemirror.addon.hint.show-hint, cljsjs.codemirror.addon.edit.matchbrackets cljsjs.codemirror.addon.edit.matchbrackets, str clojure.string, clojure.string clojure.string, cljsjs.codemirror.addon.edit.closebrackets cljsjs.codemirror.addon.edit.closebrackets, cljsjs.codemirror.addon.runmode.runmode cljsjs.codemirror.addon.runmode.runmode, cljsjs.codemirror.keymap.vim cljsjs.codemirror.keymap.vim}, :uses nil, :defs {wordChars {:name reepl.code-mirror/wordChars, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 21, :column 1, :end-line 21, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 21, :column 6, :end-line 21, :end-column 15}}, word-in-line {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 24, :column 7, :end-line 24, :end-column 19, :arglists (quote ([line lno cno]))}, :name reepl.code-mirror/word-in-line, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :end-column 19, :method-params ([line lno cno]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists (quote ([line lno cno]))}, cm-current-word {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 36, :column 7, :end-line 36, :end-column 22, :arglists (quote ([cm])), :doc "Find the current 'word' according to CodeMirror's `wordChars' list"}, :name reepl.code-mirror/cm-current-word, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :end-column 22, :method-params ([cm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cm])), :doc "Find the current 'word' according to CodeMirror's `wordChars' list"}, repl-hint {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 49, :column 7, :end-line 49, :end-column 16, :arglists (quote ([complete-word cm options])), :doc "Get a new completion state."}, :name reepl.code-mirror/repl-hint, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :end-column 16, :method-params ([complete-word cm options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists (quote ([complete-word cm options])), :doc "Get a new completion state."}, cycle-pos {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 68, :column 7, :end-line 68, :end-column 16, :arglists (quote ([count current go-back? initial-active])), :doc "Cycle through positions. Returns [active? new-pos].\n\n  count\n    total number of completions\n  current\n    current position\n  go-back?\n    should we be going in reverse\n  initial-active\n    if false, then we return not-active when wrapping around"}, :name reepl.code-mirror/cycle-pos, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :end-column 16, :method-params ([count current go-back? initial-active]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 4, :fn-var true, :arglists (quote ([count current go-back? initial-active])), :doc "Cycle through positions. Returns [active? new-pos].\n\n  count\n    total number of completions\n  current\n    current position\n  go-back?\n    should we be going in reverse\n  initial-active\n    if false, then we return not-active when wrapping around"}, cycle-completions {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 92, :column 7, :end-line 92, :end-column 24, :arglists (quote ([{:keys [num pos active from to list initial-text], :as state} go-back? cm evt])), :doc "Cycle through completions, changing the codemirror text accordingly. Returns\n  a new state map.\n\n  state\n    the current completion state\n  go-back?\n    whether to cycle in reverse (generally b/c shift is pressed)\n  cm\n    the codemirror instance\n  evt\n    the triggering event. it will be `.preventDefault'd if there are completions\n    to cycle through."}, :name reepl.code-mirror/cycle-completions, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :end-column 24, :method-params ([p__13075 go-back? cm evt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 4, :fn-var true, :arglists (quote ([{:keys [num pos active from to list initial-text], :as state} go-back? cm evt])), :doc "Cycle through completions, changing the codemirror text accordingly. Returns\n  a new state map.\n\n  state\n    the current completion state\n  go-back?\n    whether to cycle in reverse (generally b/c shift is pressed)\n  cm\n    the codemirror instance\n  evt\n    the triggering event. it will be `.preventDefault'd if there are completions\n    to cycle through."}, code-mirror {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 129, :column 7, :end-line 129, :end-column 18, :arglists (quote ([value-atom {:keys [style on-change on-eval on-up on-down complete-atom complete-word should-go-up should-go-down should-eval js-cm-opts on-cm-init]}])), :doc "Create a code-mirror editor that knows a fair amount about being a good\n  repl. The parameters:\n\n  value-atom (reagent atom)\n    when this changes, the editor will update to reflect it.\n\n  options (TODO finish documenting)\n\n  :style (reagent style map)\n    will be applied to the container element\n\n  :on-change (fn [text] -> nil)\n  :on-eval (fn [text] -> nil)\n  :on-up (fn [] -> nil)\n  :on-down (fn [] -> nil)\n  :should-go-up\n  :should-go-down\n  :should-eval\n\n  :js-cm-opts\n    options passed into the CodeMirror constructor\n\n  :on-cm-init (fn [cm] -> nil)\n    called with the CodeMirror instance, for whatever extra fiddling you want to do."}, :name reepl.code-mirror/code-mirror, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :end-column 18, :method-params ([value-atom p__13082]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value-atom {:keys [style on-change on-eval on-up on-down complete-atom complete-word should-go-up should-go-down should-eval js-cm-opts on-cm-init]}])), :doc "Create a code-mirror editor that knows a fair amount about being a good\n  repl. The parameters:\n\n  value-atom (reagent atom)\n    when this changes, the editor will update to reflect it.\n\n  options (TODO finish documenting)\n\n  :style (reagent style map)\n    will be applied to the container element\n\n  :on-change (fn [text] -> nil)\n  :on-eval (fn [text] -> nil)\n  :on-up (fn [] -> nil)\n  :on-down (fn [] -> nil)\n  :should-go-up\n  :should-go-down\n  :should-eval\n\n  :js-cm-opts\n    options passed into the CodeMirror constructor\n\n  :on-cm-init (fn [cm] -> nil)\n    called with the CodeMirror instance, for whatever extra fiddling you want to do."}, colored-text {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :line 259, :column 7, :end-line 259, :end-column 19, :arglists (quote ([text style]))}, :name reepl.code-mirror/colored-text, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/code_mirror.cljs", :end-column 19, :method-params ([text style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text style]))}}, :require-macros {pprint cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:js-cm-opts :num :complete-word :on-up :pre :complete-atom :should-eval :on-cm-init :matchBrackets :value :component-did-mount :should-go-down :mode :start :should-go-up :on-down :component-did-update :pos :on-eval :initial-text :extraKeys :style :div :viewportMargin :reagent-render :list :from :active :autofocus :padding :end :on-change :show-all :lineNumbers :none :autoCloseBrackets :to :margin}, :order [:start :end :list :num :active :show-all :initial-text :pos :from :to :on-change :js-cm-opts :complete-word :on-up :should-eval :on-cm-init :complete-atom :should-go-down :should-go-up :on-down :on-eval :style :component-did-mount :component-did-update :reagent-render :lineNumbers :viewportMargin :matchBrackets :autofocus :extraKeys :value :autoCloseBrackets :mode :none :div :pre :padding :margin]}, :doc nil}