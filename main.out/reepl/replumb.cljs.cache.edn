;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name reepl.replumb, :imports {XhrIo goog.net.XhrIo}, :requires {replumb replumb.core, pprint cljs.pprint, helpers reepl.helpers, parinfer-codemirror.editor parinfer-codemirror.editor, reepl reepl.core, reepl.helpers reepl.helpers, cljs.tools.reader cljs.tools.reader, reepl.core reepl.core, q quil.core, parinfer.codemirror.mode.clojure.clojure-parinfer parinfer.codemirror.mode.clojure.clojure-parinfer, reagent.core reagent.core, r reagent.core, cljs.js cljs.js, jsc cljs.js, replumb.core replumb.core, parinfer parinfer-codemirror.editor, ana cljs.analyzer, m quil.middleware, docs replumb.doc-maps, devtools devtools.core, cljs.pprint cljs.pprint, ast replumb.ast, quil.core quil.core, quil.middleware quil.middleware, replumb.doc-maps replumb.doc-maps, XhrIo goog.net.XhrIo, cljs.analyzer cljs.analyzer, replumb.repl replumb.repl, cljs.repl cljs.repl, replumb.ast replumb.ast, str clojure.string, devtools.core devtools.core, clojure.string clojure.string, repl cljs.repl}, :uses nil, :defs {print-doc {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 247, :column 7, :end-line 247, :end-column 16, :arglists (quote ([doc]))}, :name reepl.replumb/print-doc, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 16, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc]))}, type-name {:name reepl.replumb/type-name, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 240, :column 1, :end-line 240, :end-column 15, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 240, :column 6, :end-line 240, :end-column 15}}, run-repl {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 48, :column 7, :end-line 48, :end-column 15, :arglists (quote ([text cb]))}, :name reepl.replumb/run-repl, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 15, :method-params ([text cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text cb]))}, dedup-requires {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 106, :column 7, :end-line 106, :end-column 21, :arglists (quote ([requires])), :doc "Takes a map of {require-name ns-name} and dedups multiple keys that have the\n  same ns-name value."}, :name reepl.replumb/dedup-requires, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 21, :method-params ([requires]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([requires])), :doc "Takes a map of {require-name ns-name} and dedups multiple keys that have the\n  same ns-name value."}, process-apropos {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 190, :column 7, :end-line 190, :end-column 22, :arglists (quote ([text]))}, :name reepl.replumb/process-apropos, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 22, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}, get-from-js-ns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 93, :column 7, :end-line 93, :end-column 21, :arglists (quote ([ns])), :doc "Use js introspection to get a list of interns in a namespaces\n\n  This is pretty dependent on cljs runtime internals, so it may break in the\n  future (although I think it's fairly unlikely). It takes advantage of the fact\n  that the ns `something.other.thing' is available as an object on\n  `window.something.other.thing', and Object.keys gets all the variables in that\n  namespace."}, :name reepl.replumb/get-from-js-ns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 21, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns])), :doc "Use js introspection to get a list of interns in a namespaces\n\n  This is pretty dependent on cljs runtime internals, so it may break in the\n  future (although I think it's fairly unlikely). It takes advantage of the fact\n  that the ns `something.other.thing' is available as an object on\n  `window.something.other.thing', and Object.keys gets all the variables in that\n  namespace."}, doc-from-sym {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 226, :column 7, :end-line 226, :end-column 19, :arglists (quote ([sym]))}, :name reepl.replumb/doc-from-sym, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 19, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, js-attrs {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 129, :column 7, :end-line 129, :end-column 15, :arglists (quote ([obj]))}, :name reepl.replumb/js-attrs, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 15, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, get-doc {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 208, :column 7, :end-line 208, :end-column 14, :arglists (quote ([m]))}, :name reepl.replumb/get-doc, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 14, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, replumb-opts {:name reepl.replumb/replumb-opts, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 38, :column 1, :end-line 38, :end-column 18, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 38, :column 6, :end-line 38, :end-column 18}}, process-doc {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 265, :column 7, :end-line 265, :end-column 18, :arglists (quote ([sym])), :doc "Get the documentation for a symbol. Copied & modified from replumb."}, :name reepl.replumb/process-doc, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 18, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym])), :doc "Get the documentation for a symbol. Copied & modified from replumb."}, get-matching-ns-interns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 116, :column 7, :end-line 116, :end-column 30, :arglists (quote ([[name ns] matches? only-ns]))}, :name reepl.replumb/get-matching-ns-interns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 30, :method-params ([p__15880 matches? only-ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[name ns] matches? only-ns]))}, get-forms {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 196, :column 7, :end-line 196, :end-column 16, :arglists (quote ([m]))}, :name reepl.replumb/get-forms, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, cljs-completion {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 150, :column 7, :end-line 150, :end-column 22, :arglists (quote ([text])), :doc "Tab completion. Copied w/ extensive modifications from replumb.repl/process-apropos."}, :name reepl.replumb/cljs-completion, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 22, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Tab completion. Copied w/ extensive modifications from replumb.repl/process-apropos."}, compare-ns {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 80, :column 7, :end-line 80, :end-column 17, :arglists (quote ([current ns1 ns2])), :doc "Sorting algo for namespaces\n\n  The current ns comes first, then cljs.core, then anything else\n  alphabetically"}, :name reepl.replumb/compare-ns, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 17, :method-params ([current ns1 ns2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 3, :fn-var true, :arglists (quote ([current ns1 ns2])), :doc "Sorting algo for namespaces\n\n  The current ns comes first, then cljs.core, then anything else\n  alphabetically"}, compare-completion {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 59, :column 7, :end-line 59, :end-column 25, :arglists (quote ([text a b])), :doc "The comparison algo for completions\n\n  1. if one is exactly the text, then it goes first\n  2. if one *starts* with the text, then it goes first\n  3. otherwise leave in current order"}, :name reepl.replumb/compare-completion, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 25, :method-params ([text a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists (quote ([text a b])), :doc "The comparison algo for completions\n\n  1. if one is exactly the text, then it goes first\n  2. if one *starts* with the text, then it goes first\n  3. otherwise leave in current order"}, fetch-file! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 24, :column 7, :end-line 24, :end-column 18, :arglists (quote ([file-url src-cb])), :doc "Very simple implementation of XMLHttpRequests that given a file path\n  calls src-cb with the string fetched of nil in case of error.\n  See doc at https://developers.google.com/closure/library/docs/xhrio"}, :name reepl.replumb/fetch-file!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 18, :method-params ([file-url src-cb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([file-url src-cb])), :doc "Very simple implementation of XMLHttpRequests that given a file path\n  calls src-cb with the string fetched of nil in case of error.\n  See doc at https://developers.google.com/closure/library/docs/xhrio"}, js-completion {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :line 138, :column 7, :end-line 138, :end-column 20, :arglists (quote ([text]))}, :name reepl.replumb/js-completion, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/replumb.cljs", :end-column 20, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}}, :require-macros {jsc cljs.js, cljs.js cljs.js, pprint cljs.pprint, cljs.pprint cljs.pprint, q quil.core, quil.core quil.core, repl cljs.repl, cljs.repl cljs.repl}, :cljs.analyzer/constants {:seen #{:else :protocol :default :ns :name :special-form cljs.core :please-see :type :repl-special-function :normal :protocol-methods :requires :no-pr-str-on-value :methods :macro :warning-as-error :url quote :arglists :doc :forms}, :order [:warning-as-error :no-pr-str-on-value :else :default cljs.core :requires :forms :arglists :macro :repl-special-function quote :name :type :doc :ns :protocol :special-form :normal :please-see :url :protocol-methods :methods]}, :doc nil}