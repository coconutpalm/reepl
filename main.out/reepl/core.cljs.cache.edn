;; Analyzed by ClojureScript 1.7.228
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name reepl.core, :imports nil, :requires {subs reepl.subs, helpers reepl.helpers, reepl.helpers reepl.helpers, cljs.tools.reader cljs.tools.reader, code-mirror reepl.code-mirror, reagent.core reagent.core, r reagent.core, reepl.code-mirror reepl.code-mirror, reepl.handlers reepl.handlers, handlers reepl.handlers, reepl.show-value reepl.show-value, reepl.subs reepl.subs, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, re-frame.core re-frame.core}, :uses {subscribe re-frame.core, dispatch-sync re-frame.core, show-value reepl.show-value, dispatch re-frame.core}, :defs {initial-state {:name reepl.core/initial-state, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 290, :column 1, :end-line 290, :end-column 19, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 290, :column 6, :end-line 290, :end-column 19}}, completion-list {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 188, :column 7, :end-line 188, :end-column 22, :arglists (quote ([{:keys [pos list active show-all]} set-active]))}, :name reepl.core/completion-list, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 22, :method-params ([p__13353 set-active]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [pos list active show-all]} set-active]))}, repl-item {:name reepl.core/repl-item, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 120, :column 1, :end-line 120, :end-column 20, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 120, :column 11, :end-line 120, :end-column 20}}, default-cm-opts {:name reepl.core/default-cm-opts, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 217, :column 1, :end-line 217, :end-column 21, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 217, :column 6, :end-line 217, :end-column 21}}, view {:name reepl.core/view, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 106, :column 1, :end-line 106, :end-column 10, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 106, :column 6, :end-line 106, :end-column 10}}, text {:name reepl.core/text, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 107, :column 1, :end-line 107, :end-column 10, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 107, :column 6, :end-line 107, :end-column 10}}, intro-message {:name reepl.core/intro-message, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 110, :column 1, :end-line 110, :end-column 19, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 110, :column 6, :end-line 110, :end-column 19}}, repl-items {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 151, :column 7, :end-line 151, :end-column 17, :arglists (quote ([_]))}, :name reepl.core/repl-items, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 17, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_]))}, canScrollIfNeeded {:name reepl.core/canScrollIfNeeded, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 164, :column 1, :end-line 164, :end-column 23, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 164, :column 6, :end-line 164, :end-column 23}}, docs-view {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 273, :column 7, :end-line 273, :end-column 16, :arglists (quote ([docs]))}, :name reepl.core/docs-view, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 16, :method-params ([docs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 1, :fn-var true, :arglists (quote ([docs]))}, repl-input {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 251, :column 7, :end-line 251, :end-column 17, :arglists (quote ([state submit cm-opts]))}, :name reepl.core/repl-input, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 17, :method-params ([state submit cm-opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state submit cm-opts]))}, set-print! {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 277, :column 7, :end-line 277, :end-column 17, :arglists (quote ([log]))}, :name reepl.core/set-print!, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 17, :method-params ([log]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 1, :fn-var true, :arglists (quote ([log]))}, make-handlers {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 296, :column 7, :end-line 296, :end-column 20, :arglists (quote ([state]))}, :name reepl.core/make-handlers, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 20, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, button {:name reepl.core/button, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 108, :column 1, :end-line 108, :end-column 12, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 108, :column 6, :end-line 108, :end-column 12}}, is-valid-cljs? {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 207, :column 7, :end-line 207, :end-column 21, :arglists (quote ([source]))}, :name reepl.core/is-valid-cljs?, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 21, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source]))}, repl {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 305, :column 7, :end-line 305, :end-column 11, :arglists (quote ([& {:keys [execute complete-word get-docs state show-value-opts js-cm-opts on-cm-init]}])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [execute complete-word get-docs state show-value-opts js-cm-opts on-cm-init]})], :arglists ([& {:keys [execute complete-word get-docs state show-value-opts js-cm-opts on-cm-init]}]), :arglists-meta (nil)}}, :name reepl.core/repl, :variadic true, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [execute complete-word get-docs state show-value-opts js-cm-opts on-cm-init]})], :arglists ([& {:keys [execute complete-word get-docs state show-value-opts js-cm-opts on-cm-init]}]), :arglists-meta (nil)}, :method-params [({:keys [execute complete-word get-docs state show-value-opts js-cm-opts on-cm-init]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [execute complete-word get-docs state show-value-opts js-cm-opts on-cm-init]}])}, completion-item {:protocol-inline nil, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 167, :column 7, :end-line 167, :end-column 22, :arglists (quote ([text is-selected is-active set-active]))}, :name reepl.core/completion-item, :variadic false, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :end-column 22, :method-params ([text is-selected is-active set-active]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 4, :fn-var true, :arglists (quote ([text is-selected is-active set-active]))}, styles {:name reepl.core/styles, :file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 20, :column 1, :end-line 20, :end-column 12, :meta {:file "/Users/jared/.boot/cache/tmp/Users/jared/clone/clojure/reepl/1sf7/rcesf6/reepl/core.cljs", :line 20, :column 6, :end-line 20, :end-column 12}}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:intro-message :line-height :output-item every? :js-cm-opts :repl-items :bold :num :log-item :caret :wrap map :complete-word :input-item :clear-items :error-item :color :output-caret :on-up comp :complete-atom :completion-active :input-text :else :should-eval :white-space :font-size :on-cm-init :top :repl-input :font-weight :main-caret :default :overflow :completion-show-all :intro-code :break-word :margin-left :value :hist-pos :should-go-down :background-color :word-wrap :docs :input-container :add-result :should-go-up cm-opts :on-down :flex-wrap :component-did-update :pos :output-value :history :type :flex :execute :state :on-eval :output :input-caret :absolute :flex-shrink :on-click :completion-container :style :set-text :add-input nil? :z-index :reagent-render :padding-top :list not :underlying-error :hidden :completion-empty :clear-button :active :red :padding :count :go-down :container :completion-item :completion-selected :right :display :position :error :get-docs :show-value-opts :input :items :margin-right :go-up :on-change :hierarchy :border-top :completion-list :show-all :add-log :auto :repl-item :log :margin-bottom :relative :font-family :flex-direction :height :border-bottom :row :left :docs-empty :text}, :order [:intro-message :output-item :repl-items :caret :input-item :error-item :output-caret :completion-active :input-text :repl-input :main-caret :completion-show-all :intro-code :docs :input-container :output-value :input-caret :completion-container :underlying-error :completion-empty :clear-button :container :completion-item :completion-selected :completion-list :repl-item :docs-empty :padding :line-height :border-bottom :flex-direction :margin-bottom :row :flex :overflow :height :flex-shrink :auto :color :font-weight :margin-right :margin-left :font-size :padding-top :red :background-color :word-wrap :break-word :font-family :position :top :left :right :z-index :flex-wrap :absolute :wrap :border-top :relative :display :white-space :hidden :style :bold :hierarchy :type :default :input :num :text :log :value :log-item :error :output :component-did-update :reagent-render :on-click :pos :list :active :show-all :else :should-go-up :should-go-down :should-eval :on-up :on-down :complete-atom :complete-word :on-change every? comp not nil? map cm-opts :count :on-eval :items :hist-pos :history :add-input :add-result :go-up :go-down :clear-items :set-text :add-log :execute :get-docs :state :show-value-opts :js-cm-opts :on-cm-init]}, :doc nil}